{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EGR 314 - Embedded System Design Project II","text":""},{"location":"#stem-cooling-system","title":"STEM Cooling System","text":"<p>Team Number: 303  </p> <p>Team Members: Cade Clonts, Jahmel Garduno, Daniel Resnick</p> <p>Preparation Date: Febuary 21, 2025  </p> <p>Semester and Year: Spring 2025  </p> <p>University: Arizona State University </p> <p>Professor: K. Nichols</p>"},{"location":"#egr314-spring-2025-project-summary","title":"EGR314 Spring 2025 Project Summary","text":"<p>This semester, teams will design and build an interactive, web-enabled STEM-themed display that demonstrates a scientific or engineering concept. The intended audience is K-12 students, and projects must be modular, standards-based, and capable of communication over a custom UART daisy chain network.</p> <p>Each team member is responsible for designing an individual PCB-based subsystem, contributing to one of four key functions:</p> <p>Sensing \u2013 Gathering data from sensors via SPI/I2C</p> <p>Actuation \u2013 Controlling an output device via SPI/I2C</p> <p>Human-Machine Interface (HMI) \u2013 Displaying system data &amp; user control via OLED/pushbuttons</p> <p>Internet Communication \u2013 Enabling bidirectional data transfer via MQTT or an approved alternative</p> <p>Teams must use Cadence or Altium for PCB design and follow surface-mount component requirements. Individual subsystems must function independently before integrating into the team's daisy chain network, ensuring proper data handling and hardware safety.</p> <p>Final Deliverables Include:</p> <p>Individual: A complete \"datasheet\" with schematics, PCB layout, software, and API documentation</p> <p>Team: A system-level design report, team repository, and a fully functional integrated system</p> <p>Final Demo: Teams will showcase their project at the Innovation Showcase on May 2, 2025</p> <p>The project emphasizes hands-on engineering, modular design, embedded systems, and real-time communication, preparing students for practical challenges in electrical engineering.</p>"},{"location":"#team-role","title":"Team Role","text":"<p>My role in the team is the bidirectional internet communication subsystem using MQTT protocol. For this subsystem, I will be using an ESP32-S3-WROOM-1-N4 module mounted on a custom PCB. This system will facilitate communication between the sensor, actuator, and human interface subsystems through UART connections. A UART connection will also be implemented for the human interface, complementing the wireless interface device that communicates over the MQTT protocol. This subsystem will be responsible for sending and receiving data over MQTT with the human interface device and transferring sensor and actuator data. My focus will be on maintaining smooth and reliable data flow across the system, enabling precise interaction between the different subsystems.</p>"},{"location":"#team-links","title":"Team Links","text":"Name Link Team Website link Cade Clonts link Jahmel Garduno link Daniel Resnick link"},{"location":"extra-content/","title":"include \"mcc_generated_files/mcc.h\"","text":"<p>uint16_t time_ms = 0; uint16_t time_s = 0; float time = 0; uint8_t duty_cycle = 50;  // Start at 50% duty cycle</p> <p>void timer_callback(void){     time_ms++;     if (time_ms &gt;= 1000) {         time_ms -= 1000;         time_s++;         IO_RD2_Toggle();     } }</p> <p>void update_pwm_duty(uint8_t duty) {     if (duty &gt; 100) duty = 100;  // Limit max duty cycle     if (duty &lt; 0) duty = 0;      // Limit min duty cycle }</p> <p>void pin_up(void){     if (duty_cycle &lt; 100) {         duty_cycle += 5;         update_pwm_duty(duty_cycle);</p> <pre><code>    // Debugging message\n    char buffer[32];\n    sprintf(buffer, \"Duty Up: %d%%\\n\", duty_cycle);\n    for (int i = 0; buffer[i] != '\\0'; i++) {\n        putch(buffer[i]);  \n    }\n}\n</code></pre> <p>}</p> <p>void pin_down(void){     if (duty_cycle &gt; 0) {         duty_cycle -= 5;         update_pwm_duty(duty_cycle);</p> <pre><code>    // Debugging message\n    char buffer[32];\n    sprintf(buffer, \"Duty Down: %d%%\\n\", duty_cycle);\n    for (int i = 0; buffer[i] != '\\0'; i++) {\n        putch(buffer[i]);  \n    }\n}\n</code></pre> <p>}</p> <p>/                          Main application  / void main(void) {     // Initialize the device     SYSTEM_Initialize();     EUSART2_Initialize(); // Initialize EUSART2 for serial communication</p> <pre><code>IOCCF1_SetInterruptHandler(pin_up);\nIOCCF2_SetInterruptHandler(pin_down);\n\n// Enable global interrupts and peripheral interrupts\nINTERRUPT_GlobalInterruptEnable();\nINTERRUPT_PeripheralInterruptEnable();\n\nTMR2_SetInterruptHandler(timer_callback);\nTMR2_Start();\nupdate_pwm_duty(duty_cycle); // Set initial PWM value\n\n// Debugging: Confirm initialization\nchar init_msg[] = \"System Initialized\\n\";\nfor (int i = 0; init_msg[i] != '\\0'; i++) {\n    putch(init_msg[i]);\n}\n\nwhile (1)\n{\n    time = time_s + (time_ms / 1000.0);\n\n    // Prepare the time string\n    char buffer[32];\n    sprintf(buffer, \"t= %.2fs\\n\", time);\n\n    // Send the time string over UART\n    for (int i = 0; buffer[i] != '\\0'; i++) {\n        putch(buffer[i]);  \n    }\n\n    __delay_ms(500);\n}\n</code></pre> <p>}</p>"},{"location":"Datasheets/","title":"Datasheets","text":"ESP32-S3-WROOM-1-N4 Link Product Page URL espressif ESP32-S3-WROOM-1-N4 Datasheet URL Datasheet ESP32 S3 Datasheet URL Datasheet ESP32 S3 Technical Reference Manual URL Datasheet LM1085ISX-3.3/NOPB Link Product Page URL Texas Instrument LM1086 Datasheet URL Datasheet"},{"location":"ESP32-Table/","title":"ESP32 Table","text":"ESP Info Answer Model ESP32-S3-WROOM-1 Product Page URL espressif Found on Espressif.com ESP32-S3-WROOM-1-N4 Datasheet URL Datasheet ESP32 S3 Datasheet URL Datasheet Has more detail on functions ESP32 S3 Technical Reference Manual URL Datasheet Has details on I/O multiplexing, USB, and others Vendor link digikey Code Examples Link url(s) for libraries on github or other sites related to the microcontroller and your planned peripherals Unit cost $2.95 Absolute Maximum Current for entire IC 500ma Find in the microcontroller datasheet Supply Voltage Range 3.0V / 3.3V / 3.6V Min / Nominal / Max / Absolute Max, as found in datasheet Maximum GPIO current  (per pin) 20mA / 40mA Nominal / Max Supports External Interrupts? Yes as found in datasheet Required Programming Hardware, Cost, URL [Link]{https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html} as found in datasheet Module # Available Needed Associated Pins (or * for any) UART 3 modules 1 36 37 SPI 8 ? 5 12 13 14 15 18 19 23 I2C 4 ? 16 17 21 22 GPIO 43 ? * ADC 2 modules ? 4 5 6 7 12 15 17 18 19 20 21 22 23 24 25 26 27 28 38 39 LED PWM 8 channels ? * Motor PWM 2 modules ? * <p>* The ESP32-S2 has multiple SPI interfaces, but some are for internal use</p> <p> </p>"},{"location":"api/","title":"Summary","text":"<p>This API documentation provides details about the message structure, status codes, and message types used in the system. It includes tables for Message ID, Status, Message Types, Temperature Sensor (Message Type 1), and Fan Control (Message Type 2).</p>"},{"location":"api/#message-id","title":"Message ID","text":"<p>The Message ID table defines the unique identifiers for system members and their associated addresses. Each member is assigned a specific ID and address for communication within the system.</p> Member System ID Address Cade Clonts Wifi 1 0x01 Jahmel Human Interface 2 0x02 Dan Fan Control 3 0x03 Broadcast All 88 0x58"},{"location":"api/#status","title":"Status","text":"<p>The Status table defines the status codes used in the system to indicate the state of a message or operation.</p> Status Code Normal 0x00 Error 0x01"},{"location":"api/#message-types","title":"Message Types","text":"<p>The Message Types table categorizes the types of messages and their associated status or code ranges.</p> Category Status/Code Address Temp Data 0 to 255 0x10 Fan Control 0-125 0x20"},{"location":"api/#temperature-sensor-message-type-1","title":"Temperature Sensor (Message Type 1)","text":"<p>The Temperature Sensor table defines the structure of messages for temperature data. Each byte in the message is mapped to a specific variable, with details about its type, range, and example values.</p> Byte Variable Name Variable Type Min Value Max Value Example Value 1 prefix_1 uint8_t 0x41 0x41 0x41 2 prefix_2 uint8_t 0x5a 0x5a 0x5a 3 source_id uint8_t 3 3 0x03 4 destination_id uint8_t 1 88 0x58 5 message_type uint8_t 0x10 0x10 0x10 6 temp_id uint8_t 0 255 0x01 7 status uint8_t 0 1 0x01 8 temp_data_integer uint8_t 0 255 25 9 temp_data_fraction uint8_t 0 99 50 10-62 Unused uint8_t 0x00 0x00 0x00 63 suffix_1 uint8_t 0x59 0x59 0x59 64 suffix_2 uint8_t 0x42 0x42 0x42 Inverted Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Byte 8 Byte 9 Byte 10-62 Byte 63 Byte 64 Variable Name prefix_1 prefix_2 source_id destination_id message_type temp_id status temp_data_integer temp_data_fraction Unused suffix_1 suffix_2 Variable Type uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t Min Value 0x41 0x5a 3 1 0x10 1 0 0 0 0x00 0x59 0x42 Max Value 0x41 0x5a 3 88 0x10 255 1 155 99 0x00 0x59 0x42 Example Value 0x41 0x5a 0x03 0x58 0x10 0x01 0x01 25 50 0x00 0x59 0x42"},{"location":"api/#fan-control-message-type-2","title":"Fan Control (Message Type 2)","text":"<p>The Fan Control table defines the structure of messages for controlling fan speed. Each byte in the message is mapped to a specific variable, with details about its type, range, and example values.</p> Byte Variable Name Variable Type Min Value Max Value Example Value 1 prefix_1 uint8_t 0x41 0x41 0x41 2 prefix_2 uint8_t 0x5a 0x5a 0x5a 3 source_id uint8_t 1 2 0x01 4 destination_id uint8_t 4 4 0x04 5 message_type uint8_t 0x20 0x20 0x20 6 fan_id uint8_t 1 255 0x02 7 status uint8_t 0 1 0x01 8 fan_speed_data uint8_t 0 3 0x02 9 fan_speed_set uint8_t 0 3 0x01 10-62 Unused uint8_t 0x00 0x00 0x00 63 suffix_1 uint8_t 0x59 0x59 0x59 64 suffix_2 uint8_t 0x42 0x42 0x42 Inverted Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 Byte 8 Byte 9 Byte 10-62 Byte 63 Byte 64 Variable Name prefix_1 prefix_2 source_id destination_id message_type fan_id status fan_speed_data fan_speed_set Unused suffix_1 suffix_2 Variable Type uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t uint8_t Min Value 0x41 0x5a 1 4 0x20 1 0 0 0 0x00 0x59 0x42 Max Value 0x41 0x5a 2 4 0x20 255 1 3 3 0x00 0x59 0x42 Example Value 0x41 0x5a 0x01 0x04 0x20 0x02 0x01 0x02 0x01 0x00 0x59 0x42"},{"location":"api/#code","title":"Code","text":""},{"location":"api/#functionality","title":"Functionality","text":"<ul> <li>Can recieve temperature data and fan speed set messages and display them on a web server.</li> <li>Can take inputs of 0, 1, 2 or 3 from a web server and send it as a set fan speed message to the fan system.</li> <li>When receiving a message with it's own destination id will blink an LED</li> <li>When the temperature goes above the threshold 34\u00b0C a message to fan system to set to 3 (high fan speed) will be sent automatically.</li> <li>When the temperature dips below the threshold 34\u00b0C a message to fan system to set to 2 (medium fan speed) will be sent automatically.</li> <li>Pass messages where the destination id is not it's own.</li> <li>Ignore messages that source id is it's own.</li> <li>Ignore messages that are not within preset id's for source and destinations, do not begin with AZ and end with YB</li> </ul> ESP32 Code <pre><code>\n# Derived from: \n# * https://github.com/peterhinch/micropython-async/blob/master/v3/as_demos/auart.py\n# * https://github.com/tve/mqboard/blob/master/mqtt_async/hello-world.py\n# * https://github.com/peterhinch/micropython-mqtt\n# * https://github.com/embedded-systems-design/external_pycopy-lib\n# * https://www.adafruit.com/product/2651\n# * https://www.bosch-sensortec.com/products/environmental-sensors/pressure-sensors/pressure-sensors-bmp280-1.html\n# * https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmp280-ds001.pdf\n# * https://github.com/vitally/BMP280  \n# * https://github.com/micropython-IMU/micropython-bmp180\n\nimport ssl\n\nfrom mqtt_as.mqtt_as import MQTTClient\nfrom mqtt_as.mqtt_local import wifi_led, blue_led, config\nimport uasyncio as asyncio\nfrom machine import UART\nfrom machine import Pin\nfrom machine import I2C\nimport bmp280\nimport time\nfrom config import *\n\nMAX_MESSAGE_LEN = 64\n\n# Define team IDs and broadcast ID\nteam = [b'\\x01', b'\\x02', b'\\x03']  # Cade, Jahmel, Dan\nmy_id = b'\\x01'  # Set this device's ID (e.g., Cade)\nbroadcast = b'\\x58'  # Broadcast ID\n\nuart = UART(2, 9600,tx=21,rx=14)\nuart.init(9600, bits=8, parity=None, stop=1, flow=0) # init with given parameters\n\nled1 = Pin(12, Pin.OUT)\n\ndebug_button = Pin(15, Pin.IN, Pin.PULL_UP)\n\n# Set up I2C (GPIO21=SDA, GPIO22=SCL)\ni2c = I2C(0, scl=Pin(2), sda=Pin(3), freq=100000)\n\n# Scan I2C bus to confirm connection\nprint(\"I2C devices found:\", i2c.scan())  # Should include [118] for 0x76\n\n# Initialize BMP280 (default address 0x76)\nsensor = bmp280.BMP280(i2c)\n\n# Initialize LED on pin 14\nled2 = Pin(14, Pin.OUT)\n\ndef send_message(source, destination, message_type, sensor_id=None, status=None, temp_data=None, fan_id=None, fan_speed_data=None, fan_speed_set=None):\n    \"\"\"\n    Sends a message with the specified structure.\n    \"\"\"\n    if source not in team:\n        print(f\"ESP: Invalid source '{source}'\")\n        return\n    if destination not in team and destination != broadcast:\n        print(f\"ESP: Invalid destination '{destination}'\")\n        return\n\n    # Construct the message\n    message = bytearray(64)\n    message[0] = 65  # prefix_1 (0x41 in decimal)\n    message[1] = 90  # prefix_2 (0x5A in decimal)\n    message[2] = source[0]  # source_id\n    message[3] = destination[0]  # destination_id\n    message[4] = message_type  # message_type\n\n    if message_type == 16:  # Temp Data (0x10 in decimal)\n        if not (-40 &lt;= temp_data &lt;= 155):\n            print(\"ESP: Temperature data out of range (-40 to 155)\")\n            return\n        message[5] = sensor_id  # sensor_id\n        message[6] = status  # status\n        message[7] = int(temp_data)  # temp_data as a single value\n\n    elif message_type == 32:  # Fan Control (0x20 in decimal)\n        if not (1 &lt;= fan_id &lt;= 255):\n            print(\"ESP: Fan ID out of range (1 to 255)\")\n            return\n        if status not in [0, 1]:  # 0x00 and 0x01 in decimal\n            print(\"ESP: Invalid fan status (must be 0 or 1)\")\n            return\n        if not (0 &lt;= fan_speed_data &lt;= 3):\n            print(\"ESP: Fan speed data out of range (0 to 3)\")\n            return\n        if not (0 &lt;= fan_speed_set &lt;= 3):\n            print(\"ESP: Fan speed set value out of range (0 to 3)\")\n            return\n        message[5] = fan_id  # fan_id\n        message[6] = status  # status\n        message[7] = fan_speed_data  # fan_speed_data\n        message[8] = fan_speed_set  # fan_speed_set\n\n    else:\n        print(\"ESP: Invalid message type\")\n        return\n\n    # Unused bytes are already initialized to 0 by default\n    message[62] = 89  # suffix_1 (0x59 in decimal)\n    message[63] = 66  # suffix_2 (0x42 in decimal)\n\n    print(f\"ESP: Sending message: {message}\")\n    uart.write(message)\n\n\ndef handle_message(message):\n    \"\"\"\n    Handles an incoming message by parsing its structure.\n    Processes messages intended for this device, broadcast messages, and passes on others.\n    \"\"\"\n    if len(message) != 64:\n        print(\"ESP: Invalid message length\")\n        return\n\n    # Parse the message\n    prefix_1 = message[0]\n    prefix_2 = message[1]\n    source_id = message[2]\n    destination_id = message[3]\n    message_type = message[4]\n    suffix_1 = message[62]\n    suffix_2 = message[63]\n\n    # Validate prefixes and suffixes\n    if prefix_1 != 0x41 or prefix_2 != 0x5A or suffix_1 != 0x59 or suffix_2 != 0x42:\n        print(\"ESP: Invalid message format\")\n        return\n\n    # Ignore messages from myself\n    if source_id == my_id[0]:\n        print(\"ESP: Ignoring message from myself\")\n        return\n\n    # Process messages intended for this device\n    if destination_id == my_id[0]:\n        print(\"ESP: Message is for me\")\n\n        # Blink LED on pin 14\n        led2.value(1)  # Turn on LED\n        time.sleep(0.1)  # Short delay\n        led2.value(0)  # Turn off LED\n\n        # Handle specific message types (e.g., Temp Data, Fan Control)\n        asyncio.create_task(process_message_by_type(message_type, message))  # Use asyncio to ensure it's awaited\n\n    # Process broadcast messages\n    elif destination_id == broadcast[0]:\n        if source_id != my_id[0]:\n            print(\"ESP: Handling broadcast message from another device\")\n            # Handle specific message types (e.g., Temp Data, Fan Control)\n            asyncio.create_task(process_message_by_type(message_type, message))\n\n            # Pass the message along\n            print(\"ESP: Passing along broadcast message\")\n            uart.write(message)\n        else:\n            print(\"ESP: Ignoring broadcast message from myself\")\n\n    # Pass on messages intended for others\n    elif destination_id != my_id[0] and destination_id != broadcast[0]:\n        print(\"ESP: Passing on message for another device\")\n        uart.write(message)\n\n    else:\n        print(\"ESP: Unsupported message type or invalid destination\")\n\n\nasync def process_message_by_type(message_type, message):\n    \"\"\"\n    Processes a message based on its type.\n    \"\"\"\n    if message_type == 16:  # Temp Data (0x10 in decimal)\n        sensor_id = message[5]\n        status = message[6]\n        temp_data = message[7]\n\n        if not (-40 &lt;= temp_data &lt;= 155):\n            print(\"ESP: Received temperature data out of range (-40 to 155)\")\n            return\n\n        print(f\"ESP: Handling Temp Data message\")\n        print(f\"Sensor ID: {sensor_id}, Status: {status}, Temperature: {temp_data} \u00b0C\")\n\n    elif message_type == 32:  # Fan Control\n        fan_id = message[5]\n        status = message[6]\n        fan_speed_data = message[7]\n        fan_speed_set = message[8]\n\n        if not (1 &lt;= fan_id &lt;= 255):\n            print(\"ESP: Received invalid fan ID (1 to 255)\")\n            return\n        if status not in [0, 1]:\n            print(\"ESP: Received invalid fan status (must be 0 or 1)\")\n            return\n        if not (0 &lt;= fan_speed_data &lt;= 3):\n            print(\"ESP: Received invalid fan speed data (0 to 3)\")\n            return\n        if not (0 &lt;= fan_speed_set &lt;= 3):\n            print(\"ESP: Received invalid fan speed set value (0 to 3)\")\n            return\n\n        print(f\"ESP: Handling Fan Control message\")\n        print(f\"Fan ID: {fan_id}, Status: {status}, Fan Speed Data: {fan_speed_data}, Fan Speed Set: {fan_speed_set}\")\n\n        # Publish the fan_speed_data to a separate MQTT topic\n        fan_speed_topic = \"fan/speed\"\n        fan_speed_payload = str(fan_speed_data)\n        await client.publish(TOPIC_FAN, fan_speed_payload, qos=1)\n        print(f\"Published fan speed data to MQTT topic '{fan_speed_topic}': {fan_speed_payload}\")\n\n    else:\n        print(\"ESP: Unsupported message type\")\n\n\nasync def process_rx():\n    \"\"\"\n    Processes incoming messages over the UART network.\n    Handles messages intended for this device, passes on messages for others,\n    and ignores invalid or self-sent messages.\n    \"\"\"\n    stream = b''\n    receiving_message = False\n\n    while True:\n        # Read one byte\n        c = uart.read(1)\n\n        # If a byte is received\n        if c is not None:\n            stream += c\n\n            # Debugging: Print current stream length and content\n            # print(f\"ESP: Current stream length: {len(stream)}\")\n\n            # Check for message start\n            if stream[-2:] == b'AZ' and not receiving_message:\n                # Start a new message\n                receiving_message = True\n                stream = b'AZ'  # Reset stream to only include the prefix\n\n            # Check for message end\n            elif stream[-2:] == b'YB' and receiving_message:\n                # Complete the message\n                receiving_message = False\n                message = stream  # Copy the full message\n                stream = b''  # Clear the stream\n\n                # Validate message length\n                if len(message) != MAX_MESSAGE_LEN:\n                    print(f\"ESP: Invalid message length ({len(message)}), ignoring\")\n                    stream = b''  # Reset the stream\n                    continue\n\n                # Handle the received message in a separate task\n                asyncio.create_task(handle_message_async(message))\n                led1.value(led1.value() ^ 1)  # Toggle LED\n                continue\n\n            # Abort if message exceeds buffer size\n            elif receiving_message and len(stream) &gt; MAX_MESSAGE_LEN:\n                print(f\"ESP: Message too long, aborting. Current stream: {stream}\")\n                receiving_message = False\n                stream = b''  # Clear the stream and wait for the next prefix\n\n        # Yield control back to the event loop\n        await asyncio.sleep(0.01)  # Ensure frequent execution\n\n\nasync def handle_message_async(message):\n    \"\"\"\n    Handles an incoming message asynchronously.\n    \"\"\"\n    handle_message(message)  # Call the existing synchronous handler\n    await asyncio.sleep(0)  # Yield control back to the event loop\n\n\nasync def check_debug_button():\n    \"\"\"\n    Checks the state of the debug button and sends a message to the MQTT server if pressed.\n    \"\"\"\n    while True:\n        if debug_button.value() == 0:  # Button is pressed (active low)\n            led1.value(0)\n            debug_message = \"AZ\\x01\\x58\\x01\\x58\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00YB\"\n            print(f\"ESP: Debug button pressed, sending message: {debug_message}\")\n\n            uart.write(debug_message)  # Send the message over UART\n\n            # Publish the message in a separate task\n            asyncio.create_task(client.publish(TOPIC_PUB, debug_message, qos=1))\n\n            while debug_button.value() == 0:\n                await asyncio.sleep_ms(50)\n        else:\n            led1.value(1)\n\n        await asyncio.sleep_ms(50)\n\n# Subscription callback\ndef sub_cb(topic, msg, retained):\n    \"\"\"\n    Handles incoming MQTT messages and sends a fan control message to Dan (\\x03)\n    based on the message content (0, 1, 2, or 3).\n    \"\"\"\n    print(f'Topic: \"{topic.decode()}\" Message: \"{msg.decode()}\" Retained: {retained}')\n\n    # Check if the message is a valid number (0, 1, 2, or 3)\n    try:\n        value = int(msg.decode())\n        if value in [0, 1, 2, 3]:\n            # Send a fan control message to Dan (\\x03)\n            send_message(\n                source=my_id,               # This device's ID\n                destination=b'\\x03',        # Dan's ID\n                message_type=32,            # Fan Control message type\n                fan_id=1,                   # Example fan ID\n                status=1,                   # Example status (e.g., ON)\n                fan_speed_data=value,       # Fan speed data (same as value)\n                fan_speed_set=value         # Fan speed set (same as value)\n            )\n            print(f\"Sent fan control message to Dan with fan_speed_set: {value}\")\n        else:\n            print(\"Message is not a valid fan speed value (0-3)\")\n    except ValueError:\n        print(\"Message is not a valid integer\")\n\n    # Forward the message to UART\n    uart.write(msg)\n\n\nasync def wifi_han(state):\n    wifi_led(not state)\n    print('Wifi is ', 'up' if state else 'down')\n    await asyncio.sleep(1)\n\n# If you connect with clean_session True, must re-subscribe (MQTT spec 3.1.2.4)\nasync def conn_han(client):\n    await client.subscribe(TOPIC_SUB, 1)\n\nasync def read_temperature_and_publish():\n    last_fan_speed = None  # State variable to track the last sent fan speed\n\n    while True:\n        try:\n            # Read temperature from the sensor\n            temp_data = sensor.temperature\n            await asyncio.sleep(0)  # Yield control back to the event loop\n\n            # Ensure the temperature data is within valid ranges\n            if not (-40 &lt;= temp_data &lt;= 155):\n                print(\"ESP: Temperature data out of range (-40 to 155)\")\n                await asyncio.sleep(2)\n                continue\n\n            # Print the temperature data\n            print(f\"Temperature: {temp_data:.2f} \u00b0C\")\n\n            # Publish the temperature data to the MQTT server\n            temp_payload = f\"{temp_data:.2f}\"\n            await client.publish(TOPIC_PUB, temp_payload, qos=1)\n            print(f\"Published temperature data to MQTT: {temp_payload}\")\n\n            # Send the temperature data as a broadcast message\n            send_message(\n                source=my_id,               # This device's ID\n                destination=broadcast,      # Broadcast ID\n                message_type=16,            # Temp Data message type\n                sensor_id=1,                # Example sensor ID\n                status=1,                   # Example status (e.g., valid data)\n                temp_data=temp_data         # Single temperature value\n            )\n            print(f\"Broadcasted temperature data: {temp_data:.2f} \u00b0C\")\n\n            # Determine the fan speed based on the temperature\n            if temp_data &gt;= 34:\n                fan_speed = 3  # High speed\n            else:\n                fan_speed = 2  # Medium speed\n\n            # Send the fan control message only if the fan speed has changed\n            if fan_speed != last_fan_speed:\n                send_message(\n                    source=my_id,               # This device's ID\n                    destination=b'\\x03',        # Dan's ID\n                    message_type=32,            # Fan Control message type\n                    fan_id=1,                   # Example fan ID\n                    status=1,                   # Example status (e.g., ON)\n                    fan_speed_data=fan_speed,   # Fan speed data\n                    fan_speed_set=fan_speed     # Fan speed set\n                )\n                print(f\"Sent fan control message to Dan with fan_speed_set: {fan_speed}\")\n                last_fan_speed = fan_speed  # Update the state variable\n\n        except Exception as e:\n            print(f\"Error reading temperature: {e}\")\n\n        # Wait before reading the temperature again\n        await asyncio.sleep(5)\n\nasync def main(client):\n    try:\n        await client.connect()\n    except OSError:\n        print('Connection failed.')\n        return\n    # asyncio.create_task(receiver())\n\n# Heartbeat function\n    n = 0\n    while True:\n        await asyncio.sleep(5)\n        print('publish', n)\n        # If WiFi is down the following will pause for the duration.\n        await client.publish(TOPIC_HB, '{} {}'.format(n, client.REPUB_COUNT), qos = 1)\n        n += 1\n\n# Demonstrate scheduler is operational.\nasync def heartbeat():\n    s = True\n    while True:\n        await asyncio.sleep_ms(500)\n        blue_led(s)\n        s = not s\n        await asyncio.sleep(0)\n\n# Define configuration\nconfig['server'] = MQTT_SERVER\nconfig['ssid']     = WIFI_SSID\nconfig['wifi_pw']  = WIFI_PASSWORD\n\nconfig['ssl']  = True\n# read in DER formatted certs &amp; user key\nwith open('certs/student_key.pem', 'rb') as f:\n    key_data = f.read()\nwith open('certs/student_crt.pem', 'rb') as f:\n    cert_data = f.read()\nwith open('certs/ca_crt.pem', 'rb') as f:\n    ca_data = f.read()\nssl_params = {}\nssl_params[\"cert\"] = cert_data\nssl_params[\"key\"] = key_data\nssl_params[\"cadata\"] = ca_data\nssl_params[\"server_hostname\"] = MQTT_SERVER\nssl_params[\"cert_reqs\"] = ssl.CERT_REQUIRED\nconfig[\"time_server\"] = MQTT_SERVER\nconfig[\"time_server_timeout\"] = 10\n\nconfig['ssl_params']  = ssl_params\n\nconfig['subs_cb'] = sub_cb\nconfig['wifi_coro'] = wifi_han\nconfig['connect_coro'] = conn_han\nconfig['clean'] = True\nconfig['user'] = MQTT_USER\nconfig[\"password\"] = MQTT_PASSWORD\n\n# Set up client\nMQTTClient.DEBUG = True  # Optional\nclient = MQTTClient(config)\n\nasyncio.create_task(process_rx()),\nasyncio.create_task(check_debug_button()),\nasyncio.create_task(heartbeat()),\nasyncio.create_task(read_temperature_and_publish())\n\ntry:\n    asyncio.run(main(client))\nfinally:\n    client.close()  # Prevent LmacRxBlk:1 errors\n    asyncio.new_event_loop()\n\n\n</code></pre> <ul> <li>ESP Code Rev1</li> <li>ESP Code Rev2 4/22/25</li> <li>ESP Code Rev2.1 4/22/25</li> <li>ESP Code Rev2.2 4/29/25</li> </ul>"},{"location":"block-diagram/","title":"Block Diagram","text":"<p>The system is centered around the ESP32-S3-WROOM-1-N4 microcontroller, which handles Wi-Fi connectivity for sending data to an MQTT server and UART communication for interfacing with external devices.</p> <p>Power is supplied via two sources: a 12V, 8A input (regulated to 3.3V using an AP62300TWU-7 regulator) and a 5V PC USB input (regulated to 3.3V using a TS1117BCW33_RPG regulator). The 12V power is also distributed to an 8-pin connector for external use.</p> <p>UART communication is facilitated through UART RX (receiving data from downstream) and UART TX (transmitting data to upstream), enabling seamless data exchange with external devices. This setup provides a flexible and efficient platform for IoT applications.</p> <p></p>"},{"location":"board-design/Index/","title":"Board Design","text":"<p>The schematic below details the bidirectional communication system, ensuring reliable data transmission between components. This design incorporates several key sections, each serving a critical function in facilitating seamless communication.</p> <p>To support debugging and monitoring, the schematic includes three dedicated debug LEDs, providing visual indicators for data transmission and system status. Test points are strategically placed to allow for easy signal probing and troubleshooting. Additionally, reset and boot switches are integrated to enable system resets and firmware updates as needed.</p> <p>A 3.3V voltage regulator is also included to ensure a stable power supply for the communication circuitry. This schematic meets user needs and product requirements by enabling efficient data exchange, supporting UART communication, and providing robust system diagnostics.</p> <ul> <li>ZIP Project Folder</li> <li>Zip Gerber Files</li> </ul>"},{"location":"board-design/Index/#schematic","title":"Schematic","text":"<ul> <li>Schematic PDF</li> </ul>"},{"location":"board-design/Index/#pcb-design","title":"PCB Design","text":"<ul> <li>PCB PDF</li> </ul>"},{"location":"board-design/Index/#top-layer","title":"Top Layer","text":""},{"location":"board-design/Index/#bottom-layer","title":"Bottom Layer","text":""},{"location":"board-design/Index/#pcb-top-layer","title":"PCB Top Layer","text":""},{"location":"board-design/Index/#pcb-bottom-layer","title":"PCB Bottom Layer","text":""},{"location":"board-design/Index/#bill-of-materials","title":"Bill of Materials","text":"Part Name/Description Manufacturer Part # Vendor Link Datasheet Link Schematic Reference Designators Capacitor 22uF CL21A226MAYNNNE Digikey Datasheet C2,C6 Capacitor 10uF 0805 GRM21BR61E106KA73L Digikey Datasheet C1,C8,C9 Capacitor 0.1uF 0805 CC0805KRX7R9BB104 Digikey Datasheet C3,C4,C5,C7,C10,C11 Green LED 0805 150080VS75000 Digikey Datasheet D1,D2,D3,D4 Red LED 0805 150080RS75000 Digikey Datasheet Diode 0805 SD0805S020S1R0 Digikey Datasheet D6,D7 8 Pin header 702460801 Digikey Datasheet J1,J2 Usb connector USB3131-30-0230-A Digikey Datasheet J3 Barrel Jack 54-00167 Digikey Datasheet J4 Jumper Female 15291026 Digikey Datasheet J5,J6,J7 Jumper Male 68705-102HLF Digikey Datasheet Inductor 3.3uH VLS5045EX-3R3N Digikey Datasheet L1 Resistor 33.2k Ohm 0805 RMCF0805FT33K2 Digikey Datasheet R1 Resistor 10k Ohm 0805 RMCF0805FT10K0 Digikey Datasheet R2,R7,R8,R9 Resistor 100 Ohm 0805 RMCF0805FT100R Digikey Datasheet R3,R4,R5,R6 Switch B3U-1000P Digikey Datasheet SW1,SW2,SW3 Test Points 5006 Digikey Datasheet TP1,TP2,TP3,TP4,TP5 ESP32 ESP32-S3-WROOM-1-N4 Digikey Datasheet U1 Voltage Reg 5v-3v TS1117BCW33 RPG Digikey Datasheet U2 Voltage Reg 12v-3v AP62300TWU-7 Digikey Datasheet VR1 Fuse Holder 4628 Digikey Datasheet Power Supply Amazon Datasheet Ribbon Cable Amazon Fuse 2A Digikey Datasheet F1 Header pins 18 J8,J9 <ul> <li>XLSX Files</li> </ul>"},{"location":"board-design/Index/#power-budget","title":"Power Budget","text":"<ul> <li>XLSX Files</li> </ul>"},{"location":"component-selection/","title":"Component Selection","text":""},{"location":"component-selection/#microcontroller","title":"Microcontroller","text":"Solution Pros Cons Option 1. ESP32-S3-WROOM-1-N4 $2.95/eachlink to product Versatile  Wifi and Bluetooth  Meets surface mount constraint of project No Dedicated SRAM  Option 2.  ESP32-S3-WROOM-1-N16R8  $3.90/each  Link to product 16MB of memory  Wifi and Bluetooth More expensive  Slow shipping speed  Option 3.  ESP32-WROOM-32E-H4  $2.68/each  Link to product Wider operating temperature range  Wifi and Bluetooth Low Inventory  Slow shipping speed <p>Choice: Option 1: ESP32-S3-WROOM-1-N4.</p> <p>Rationale: The ESP32-S3-WROOM-1-N4 is the optimal choice because it provides a balance of features, cost, and compatibility with the project requirements. Its integrated Wi-Fi and Bluetooth v5.0 capabilities, surface mount design, and sufficient memory make it ideal for bidirectional internet communication. While it has some limitations, such as limited RAM and a moderate operating temperature range, these are not critical for the project.</p>"},{"location":"component-selection/#usb-connector","title":"USB Connector","text":"Solution Pros Cons Option 1.  E10118193-0001LF$0.41/eachlink to product Right Angle Mounting  Through hole and SMD Mounting  Shielded Through hole and SMD complexity  Option 2.  10118192-0002LF  $0.38/each  Link to product Right Angle Mounting  Shielded More expensive  7 Week Lead Time  Option 3.  USB3140-30-0170-1-C  $0.77/each  Link to product Wider operating temperature range  Shielded SMD Mounting only  Vertical Mounting <p>Choice: Option 1: 10118193-0001LF.</p> <p>Rationale: The 10118193-0001LF is the optimal choice because it provides a balance of high current handling, robust shielding, and mounting flexibility. Its 10,000 mating cycles and wide operating temperature range ensure durability and reliability</p>"},{"location":"component-selection/#linear-voltage-regulator","title":"Linear Voltage Regulator","text":"Solution Pros Cons Option 1. NCP5662DS33R4G$1.32/eachlink to product  Over-Current Protection  Enable Pin Obsolete Status  Bulk Quantity Ordering  Option 2.  TPS75133QPWPR  $4.12/each  Link to product Wide Temp Range  Advance Features (Reset Pin, etc.) Low Dropout Voltage  Input Voltage 5.5  Option 3.  NCP565MN33T2G  $0.89/each  Link to product Compact Design  Wide Temperature Range Difficult SMD mounting  Obsolete Status Option 4.  AP62300TWU-7  $0.71/each  Link to product Larger Package Size  Wide Voltage Input Range (4.2V - 18V)  High Efficiency 85\u00b0C Top Temperature Option 5.  TS1117BCW33 RPG  $0.82/each  Link to product Fixed 3.3V Output  Simple Design  Overcurrent &amp; Thermal Protection  High Dropout Voltage  Lower Efficiency <p>Choice: Option 4 &amp; 5: AP62300TWU-7; TS1117BCW33 RPG</p> <p>Rationale: The combination of the AP62300TWU-7 and TS1117BCW33 RPG provides a versatile power regulation solution. The AP62300TWU-7, a high-efficiency buck converter, efficiently steps down higher input voltages (4.2V - 18V) while delivering up to 3A output current, making it ideal for applications requiring higher power efficiency. However, its switching nature may introduce noise.</p> <p>The TS1117BCW33 RPG, a low-dropout (LDO) regulator, provides a clean and stable 3.3V output with built-in overcurrent and thermal protection, making it well-suited for noise-sensitive components and 5V PC Programming. Though less efficient than the buck converter, its simplicity and low dropout performance (for lower currents) make it a good secondary choice.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}