{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EGR 314 - Embedded System Design Project II","text":""},{"location":"#stem-weather-station-project","title":"STEM Weather Station Project","text":"<p>Team Number: 303  </p> <p>Team Members: Cade Clonts, Tyler Dean, Jahmel Garduno, Daniel Resnick</p> <p>Preparation Date: Febuary 21, 2025  </p> <p>Semester and Year: Spring 2025  </p> <p>University: Arizona State University </p> <p>Professor: K. Nichols</p>"},{"location":"#team-role","title":"Team Role","text":"<p>My role in the team is the bidirectional internet communication subsystem using MQTT protocol. For this subsystem, I will be using an ESP32-S3-WROOM-1-N4 module mounted on a custom PCB. This system will facilitate communication between the sensor, actuator, and human interface subsystems through UART connections. A UART connection will also be implemented for the human interface, complementing the wireless interface device that communicates over the MQTT protocol. This subsystem will be responsible for sending and receiving data over MQTT with the human interface device and transferring sensor and actuator data. My focus will be on maintaining smooth and reliable data flow across the system, enabling precise interaction between the different subsystems.</p>"},{"location":"#links","title":"Links","text":"Name Link Team Website link Cade Clonts link Tyler Dean link Jahmel Garduno link Daniel Resnick link"},{"location":"#my-assignments","title":"My Assignments","text":"Assignment Link Block Diagram link Component Selection link Schematic Design link"},{"location":"#code","title":"Code","text":"<p>-code1 -code2</p>"},{"location":"#include-mcc_generated_filesmcch","title":"include \"mcc_generated_files/mcc.h\"","text":"<p>uint16_t time_ms = 0; uint16_t time_s = 0; float time = 0; uint8_t duty_cycle = 50; // Start at 50% duty cycle</p> <p>void timer_callback(void){ time_ms++; if (time_ms &gt;= 1000) { time_ms -= 1000; time_s++; IO_RD2_Toggle(); } }</p> <p>void update_pwm_duty(uint8_t duty) { if (duty &gt; 100) duty = 100; // Limit max duty cycle if (duty &lt; 0) duty = 0; // Limit min duty cycle }</p> <p>void pin_up(void){ if (duty_cycle &lt; 100) { duty_cycle += 5; update_pwm_duty(duty_cycle);</p> <pre><code>// Debugging message\nchar buffer[32];\nsprintf(buffer, \"Duty Up: %d%%\\n\", duty_cycle);\nfor (int i = 0; buffer[i] != '\\0'; i++) {\n    putch(buffer[i]);  \n}\n</code></pre> <p>} }</p> <p>void pin_down(void){ if (duty_cycle &gt; 0) { duty_cycle -= 5; update_pwm_duty(duty_cycle);</p> <pre><code>// Debugging message\nchar buffer[32];\nsprintf(buffer, \"Duty Down: %d%%\\n\", duty_cycle);\nfor (int i = 0; buffer[i] != '\\0'; i++) {\n    putch(buffer[i]);  \n}\n</code></pre> <p>} }</p> <p>/ Main application / void main(void) { // Initialize the device SYSTEM_Initialize(); EUSART2_Initialize(); // Initialize EUSART2 for serial communication</p> <p>IOCCF1_SetInterruptHandler(pin_up); IOCCF2_SetInterruptHandler(pin_down);</p> <p>// Enable global interrupts and peripheral interrupts INTERRUPT_GlobalInterruptEnable(); INTERRUPT_PeripheralInterruptEnable();</p> <p>TMR2_SetInterruptHandler(timer_callback); TMR2_Start(); update_pwm_duty(duty_cycle); // Set initial PWM value</p> <p>// Debugging: Confirm initialization char init_msg[] = \"System Initialized\\n\"; for (int i = 0; init_msg[i] != '\\0'; i++) {     putch(init_msg[i]); }</p> <p>while (1) {     time = time_s + (time_ms / 1000.0);</p> <pre><code>// Prepare the time string\nchar buffer[32];\nsprintf(buffer, \"t= %.2fs\\n\", time);\n\n// Send the time string over UART\nfor (int i = 0; buffer[i] != '\\0'; i++) {\n    putch(buffer[i]);  \n}\n\n__delay_ms(500);\n</code></pre> <p>} }</p>"},{"location":"extra-content/","title":"include \"mcc_generated_files/mcc.h\"","text":"<p>uint16_t time_ms = 0; uint16_t time_s = 0; float time = 0; uint8_t duty_cycle = 50;  // Start at 50% duty cycle</p> <p>void timer_callback(void){     time_ms++;     if (time_ms &gt;= 1000) {         time_ms -= 1000;         time_s++;         IO_RD2_Toggle();     } }</p> <p>void update_pwm_duty(uint8_t duty) {     if (duty &gt; 100) duty = 100;  // Limit max duty cycle     if (duty &lt; 0) duty = 0;      // Limit min duty cycle }</p> <p>void pin_up(void){     if (duty_cycle &lt; 100) {         duty_cycle += 5;         update_pwm_duty(duty_cycle);</p> <pre><code>    // Debugging message\n    char buffer[32];\n    sprintf(buffer, \"Duty Up: %d%%\\n\", duty_cycle);\n    for (int i = 0; buffer[i] != '\\0'; i++) {\n        putch(buffer[i]);  \n    }\n}\n</code></pre> <p>}</p> <p>void pin_down(void){     if (duty_cycle &gt; 0) {         duty_cycle -= 5;         update_pwm_duty(duty_cycle);</p> <pre><code>    // Debugging message\n    char buffer[32];\n    sprintf(buffer, \"Duty Down: %d%%\\n\", duty_cycle);\n    for (int i = 0; buffer[i] != '\\0'; i++) {\n        putch(buffer[i]);  \n    }\n}\n</code></pre> <p>}</p> <p>/                          Main application  / void main(void) {     // Initialize the device     SYSTEM_Initialize();     EUSART2_Initialize(); // Initialize EUSART2 for serial communication</p> <pre><code>IOCCF1_SetInterruptHandler(pin_up);\nIOCCF2_SetInterruptHandler(pin_down);\n\n// Enable global interrupts and peripheral interrupts\nINTERRUPT_GlobalInterruptEnable();\nINTERRUPT_PeripheralInterruptEnable();\n\nTMR2_SetInterruptHandler(timer_callback);\nTMR2_Start();\nupdate_pwm_duty(duty_cycle); // Set initial PWM value\n\n// Debugging: Confirm initialization\nchar init_msg[] = \"System Initialized\\n\";\nfor (int i = 0; init_msg[i] != '\\0'; i++) {\n    putch(init_msg[i]);\n}\n\nwhile (1)\n{\n    time = time_s + (time_ms / 1000.0);\n\n    // Prepare the time string\n    char buffer[32];\n    sprintf(buffer, \"t= %.2fs\\n\", time);\n\n    // Send the time string over UART\n    for (int i = 0; buffer[i] != '\\0'; i++) {\n        putch(buffer[i]);  \n    }\n\n    __delay_ms(500);\n}\n</code></pre> <p>}</p>"},{"location":"Datasheets/","title":"Datasheets","text":"ESP32-S3-WROOM-1-N4 Link Product Page URL espressif ESP32-S3-WROOM-1-N4 Datasheet URL Datasheet ESP32 S3 Datasheet URL Datasheet ESP32 S3 Technical Reference Manual URL Datasheet LM1085ISX-3.3/NOPB Link Product Page URL Texas Instrument LM1086 Datasheet URL Datasheet"},{"location":"ESP32-Table/","title":"ESP32 Table","text":"ESP Info Answer Model ESP32-S3-WROOM-1 Product Page URL espressif Found on Espressif.com ESP32-S3-WROOM-1-N4 Datasheet URL Datasheet ESP32 S3 Datasheet URL Datasheet Has more detail on functions ESP32 S3 Technical Reference Manual URL Datasheet Has details on I/O multiplexing, USB, and others Vendor link digikey Code Examples Link url(s) for libraries on github or other sites related to the microcontroller and your planned peripherals Unit cost $2.95 Absolute Maximum Current for entire IC 500ma Find in the microcontroller datasheet Supply Voltage Range 3.0V / 3.3V / 3.6V Min / Nominal / Max / Absolute Max, as found in datasheet Maximum GPIO current  (per pin) 20mA / 40mA Nominal / Max Supports External Interrupts? Yes as found in datasheet Required Programming Hardware, Cost, URL [Link]{https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/get-started/index.html} as found in datasheet Module # Available Needed Associated Pins (or * for any) UART 3 modules 1 36 37 SPI 8 ? 5 12 13 14 15 18 19 23 I2C 4 ? 16 17 21 22 GPIO 43 ? * ADC 2 modules ? 4 5 6 7 12 15 17 18 19 20 21 22 23 24 25 26 27 28 38 39 LED PWM 8 channels ? * Motor PWM 2 modules ? * <p>* The ESP32-S2 has multiple SPI interfaces, but some are for internal use</p> <p> </p>"},{"location":"block-diagram/","title":"Block Diagram","text":""},{"location":"block-diagram/#block-diagram","title":"Block Diagram","text":""},{"location":"board-design/Index/","title":"Board Design","text":"<p>The schematic below details the bidirectional communication system, ensuring reliable data transmission between components. This design incorporates several key sections, each serving a critical function in facilitating seamless communication.</p> <p>To support debugging and monitoring, the schematic includes three dedicated debug LEDs, providing visual indicators for data transmission and system status. Test points are strategically placed to allow for easy signal probing and troubleshooting. Additionally, reset and boot switches are integrated to enable system resets and firmware updates as needed.</p> <p>A 3.3V voltage regulator is also included to ensure a stable power supply for the communication circuitry. This schematic meets user needs and product requirements by enabling efficient data exchange, supporting UART communication, and providing robust system diagnostics.</p>"},{"location":"board-design/Index/#schematic","title":"Schematic","text":""},{"location":"board-design/Index/#download-links","title":"Download Links","text":"<ul> <li>PDF</li> <li>ZIP Cadence Folder</li> </ul>"},{"location":"board-design/Index/#pcb-design","title":"PCB Design","text":"<p>Coming Soon</p>"},{"location":"board-design/Index/#bill-of-materials","title":"Bill of Materials","text":""},{"location":"board-design/Index/#power-budget","title":"Power Budget","text":""},{"location":"component-selection/","title":"Component Selection","text":"<p>Table 1</p> <p>Microcontroller</p> Solution Pros Cons Option 1. ESP32-S3-WROOM-1-N4$2.95/eachlink to product * Versatile * Wifi and Bluetooth* Meets surface mount constraint of project * No Dedicated SRAM * Option 2. * ESP32-S3-WROOM-1-N16R8 * $3.90/each * Link to product * 16MB of memory * Wifi and Bluetooth * More expensive * Slow shipping speed * Option 3. * ESP32-WROOM-32E-H4 * $2.68/each * Link to product * Wider operating temperature range * Wifi and Bluetooth * Low Inventory * Slow shipping speed <p>Choice: Option 1: ESP32-S3-WROOM-1-N4.</p> <p>Rationale: The ESP32-S3-WROOM-1-N4 is the optimal choice because it provides a balance of features, cost, and compatibility with the project requirements. Its integrated Wi-Fi and Bluetooth v5.0 capabilities, surface mount design, and sufficient memory make it ideal for bidirectional internet communication. While it has some limitations, such as limited RAM and a moderate operating temperature range, these are not critical for the project.</p> <p>Table 2</p> <p>USB Connector</p> Solution Pros Cons Option 1. E10118193-0001LF$0.41/eachlink to product * Right Angle Mounting *Through hole and SMD Mounting * Shielded * Through hole and SMD complexity * Option 2. * 10118192-0002LF * $0.38/each * Link to product * Right Angle Mounting * Shielded * More expensive * 7 Week Lead Time * Option 3. * USB3140-30-0170-1-C * $0.77/each * Link to product * Wider operating temperature range * Shielded * SMD Mounting only * Vertical Mounting <p>Choice: Option 1: 10118193-0001LF.</p> <p>Rationale: The 10118193-0001LF is the optimal choice because it provides a balance of high current handling, robust shielding, and mounting flexibility. Its 10,000 mating cycles and wide operating temperature range ensure durability and reliability</p> <p>Table 3</p> <p>Linear Voltage Regulator</p> Solution Pros Cons Option 1. NCP5662DS33R4G$1.32/eachlink to product * Over-Current Protection * Enable Pin * Obsolete Status * Bulk Quantity Ordering * Option 2. * TPS75133QPWPR * $4.12/each * Link to product * Wide Temp Range * Advance Features (Reset Pin, etc.) * Low Dropout Voltage * Input Voltage 5.5 * Option 3. * NCP565MN33T2G * $0.89/each * Link to product * Compact Design * Wide Temperature Range * Difficult SMD mounting * Obsolete Status * Option 4. * LM1085ISX-3.3/NOPB * $1.84/each * Link to product * Larger Package Size * Wide Voltage Input Range * High Dropout Voltage <p>Choice: Option 4: LM1085ISX-3.3/NOPB.</p> <p>Rationale: The LM1085ISX-3.3/NOPB is the optimal choice because it provides a balance of wide input voltage range, high current output, and robust protection features. Its wide operating temperature range ensures stable and reliable operation in various environments. Although it has a higher dropout voltage and quiescent current, these are outweighed by its performance and reliability, making it the best fit for the project.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}